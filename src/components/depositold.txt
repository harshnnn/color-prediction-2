import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Navbar from './Navbar';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const depositRules = [
  "Deposit money only in the below available accounts to get the fastest credits and avoid possible delays.",
  "Deposits made 45 minutes after the account removal from the site are valid & will be added to their wallets.",
  "Site is not responsible for money deposited to Old, Inactive or Closed accounts.",
  "After deposit, add your UTR and amount to receive balance.",
  "NEFT receiving time varies from 40 minutes to 2 hours.",
  "In case of account modification: payment valid for 1 hour after changing account details in deposit page."
];

const dummyHistory = [
  {
    transactionNo: "516725153635",
    amount: 300,
    status: "APPROVED",
    date: "16-06-2025 06:25:02 PM",
    reason: "-"
  },
  {
    transactionNo: "508256733813",
    amount: 1000,
    status: "APPROVED",
    date: "23-03-2025 04:49:44 PM",
    reason: "-"
  }
];

// Example deposit methods (can be extended)
const depositMethods = [
  {
    key: 'bank1',
    label: 'ACCOUNT',
    icon: '🏦',
    details: {
      bankName: 'Bank Of Maharashtra',
      accountNo: '60530478827',
      ifsc: 'MAHB0001822',
      accountHolder: 'Godabai Ramdas Ulke',
      minAmount: 300,
      maxAmount: 100000,
    }
  },
  {
    key: 'bank2',
    label: 'ACCOUNT',
    icon: '🏦',
    details: {
      bankName: 'State Bank of India',
      accountNo: '12345678901',
      ifsc: 'SBIN0001234',
      accountHolder: 'Ramesh Kumar',
      minAmount: 300,
      maxAmount: 50000,
    }
  },
  {
    key: 'paytm',
    label: 'PAYTM',
    icon: '💳',
    details: {
      paytmNo: '9876543210',
      accountHolder: 'Paytm User',
      minAmount: 300,
      maxAmount: 20000,
    }
  },
  {
    key: 'usdt',
    label: 'USDT',
    icon: '🪙',
    details: {
      usdtAddress: 'TXYZ1234567890',
      minAmount: 300,
      maxAmount: 100000,
    }
  },
  {
    key: 'whatsapp',
    label: 'WHATSAPP DEPOSIT',
    icon: '🟢',
    details: {
      whatsapp: '+91-9876543210',
      note: 'Contact support for WhatsApp deposit.'
    }
  }
];

export default function DepositPage() {
  const [amount, setAmount] = useState('');
  const [step, setStep] = useState('amount'); // 'amount' | 'method'
  const [selectedMethod, setSelectedMethod] = useState(null);
  const [utr, setUtr] = useState('');
  const [paymentProof, setPaymentProof] = useState(null);

  const navigate = useNavigate();

  // Handle submit for amount
  const handleAmountSubmit = (e) => {
    e.preventDefault();
    const amt = Number(amount);
    if (isNaN(amt) || amt < 300) {
      toast.error('Amount should be at least 300', { position: "top-center" });
      return;
    }
    setStep('method');
    // Select default method (first in list) when entering method step
    setSelectedMethod(depositMethods[0]);
  };

  // Handle method selection
  const handleMethodSelect = (method) => {
    setSelectedMethod(method);
  };

  // Handle file upload
  const handleFileChange = (e) => {
    setPaymentProof(e.target.files[0]);
  };

  // Handle deposit final submit (UTR, proof, etc)
  const handleDepositFinalSubmit = (e) => {
    e.preventDefault();
    // Validate UTR and payment proof
    if (!utr || utr.length < 6 || utr.length > 12) {
      toast.error('Enter a valid 6 to 12 digit UTR number', { position: "top-center" });
      return;
    }
    if (!paymentProof) {
      toast.error('Please upload your payment proof', { position: "top-center" });
      return;
    }
    // You can add API call here
    toast.success('Deposit request submitted!', { position: "top-center" });
    // Reset form or redirect as needed
  };

  // Back button logic
  const handleBack = () => {
    if (step === 'amount') {
      // If on amount step, go back to game
      navigate('/');
    } else {
      // If on method step, go back to /Deposit (reset to amount step)
      setStep('amount');
      setSelectedMethod(null);
      setUtr('');
      setPaymentProof(null);
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-[#f3f2f6]">
      <ToastContainer />
      <Navbar />
      {/* Back Button */}
      <div className="flex w-full max-w-6xl mx-auto mt-2 px-4">
        <button
          onClick={handleBack}
          className="flex items-center gap-2 px-4 py-2 bg-white rounded shadow text-blue-900 font-bold border border-blue-200 hover:bg-blue-50"
        >
          <span className="text-lg">&#8592;</span>
          <span>BACK</span>
        </button>
      </div>
      <div className="flex flex-1 w-full max-w-6xl mx-auto mt-4 gap-8 px-4 overflow-auto">
        {/* Left: Deposit Form & Rules */}
        <div className="flex-1 flex flex-col min-w-[340px] max-w-[600px]">
          <div className="bg-white/90 rounded-xl shadow p-6 mb-6">
            {step === 'amount' && (
              <form onSubmit={handleAmountSubmit}>
                <div className="mb-4">
                  <label className="block text-gray-800 font-semibold mb-2 text-lg">Amount</label>
                  <div className="flex">
                    <input
                      type="number"
                      className="flex-1 px-4 py-3 rounded-l border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 text-lg"
                      placeholder="Enter amount"
                      value={amount}
                      onChange={e => setAmount(e.target.value)}
                      min={300}
                    />
                    <button
                      type="submit"
                      className="bg-[#1a237e] text-white font-bold px-6 rounded-r transition hover:bg-blue-900"
                    >
                      SUBMIT
                    </button>
                  </div>
                </div>
              </form>
            )}

            {step === 'method' && !selectedMethod && (
              <div>
                <div className="mb-6 flex flex-wrap gap-3">
                  {depositMethods.map((method) => (
                    <button
                      key={method.key}
                      className={`flex flex-col items-center justify-center px-4 py-3 rounded-xl border-2 border-blue-200 bg-white shadow hover:bg-blue-50 transition-all min-w-[120px]`}
                      onClick={() => handleMethodSelect(method)}
                      type="button"
                    >
                      <span className="text-2xl mb-1">{method.icon}</span>
                      <span className="font-bold text-blue-900">{method.label}</span>
                    </button>
                  ))}
                </div>
                <div className="text-gray-500 text-sm mt-2">Select a deposit method above.</div>
              </div>
            )}

            {step === 'method' && selectedMethod && (
              <form onSubmit={handleDepositFinalSubmit}>
                <div className="mb-4">
                  <div className="font-bold text-blue-900 text-lg mb-2">{selectedMethod.label} Details</div>
                  <div className="bg-gray-100 rounded-lg p-4 mb-3">
                    {/* Render details based on method */}
                    {selectedMethod.key.startsWith('bank') && (
                      <div className="space-y-1">
                        <div><b>Bank Name</b>: {selectedMethod.details.bankName}</div>
                        <div><b>A/C No</b>: {selectedMethod.details.accountNo}</div>
                        <div><b>IFSC Code</b>: {selectedMethod.details.ifsc}</div>
                        <div><b>Account Name</b>: {selectedMethod.details.accountHolder}</div>
                        <div><b>Min Amount</b>: {selectedMethod.details.minAmount}</div>
                        <div><b>Max Amount</b>: {selectedMethod.details.maxAmount}</div>
                      </div>
                    )}
                    {selectedMethod.key === 'paytm' && (
                      <div className="space-y-1">
                        <div><b>Paytm No</b>: {selectedMethod.details.paytmNo}</div>
                        <div><b>Account Name</b>: {selectedMethod.details.accountHolder}</div>
                        <div><b>Min Amount</b>: {selectedMethod.details.minAmount}</div>
                        <div><b>Max Amount</b>: {selectedMethod.details.maxAmount}</div>
                      </div>
                    )}
                    {selectedMethod.key === 'usdt' && (
                      <div className="space-y-1">
                        <div><b>USDT Address</b>: {selectedMethod.details.usdtAddress}</div>
                        <div><b>Min Amount</b>: {selectedMethod.details.minAmount}</div>
                        <div><b>Max Amount</b>: {selectedMethod.details.maxAmount}</div>
                      </div>
                    )}
                    {selectedMethod.key === 'whatsapp' && (
                      <div className="space-y-1">
                        <div><b>WhatsApp</b>: {selectedMethod.details.whatsapp}</div>
                        <div><b>Note</b>: {selectedMethod.details.note}</div>
                      </div>
                    )}
                  </div>
                </div>
                {/* UTR and Payment Proof only for non-whatsapp methods */}
                {selectedMethod.key !== 'whatsapp' && (
                  <>
                    <div className="mb-4">
                      <label className="block font-semibold mb-1">Unique Transaction Reference <span className="text-red-500">*</span></label>
                      <input
                        type="text"
                        className="w-full px-4 py-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400"
                        placeholder="6 to 12 Digit UTR Number"
                        value={utr}
                        onChange={e => setUtr(e.target.value)}
                        maxLength={12}
                        minLength={6}
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label className="block font-semibold mb-1">Upload Your Payment Proof <span className="text-red-500">[Required]</span></label>
                      <input
                        type="file"
                        className="block"
                        onChange={handleFileChange}
                        required
                      />
                    </div>
                  </>
                )}
                <div className="mb-4">
                  <label className="block font-semibold mb-1">Amount</label>
                  <input
                    type="number"
                    className="w-full px-4 py-2 rounded border border-gray-300 bg-gray-100"
                    value={amount}
                    readOnly
                  />
                </div>
                {/* Terms and submit */}
                {selectedMethod.key !== 'whatsapp' && (
                  <div className="mb-4 flex items-center">
                    <input type="checkbox" required className="mr-2" id="agree" />
                    <label htmlFor="agree" className="text-sm">
                      I have read and agree with the <a href="#" className="text-blue-600 underline">terms of payment and withdrawal policy</a>.
                    </label>
                  </div>
                )}
                <button
                  type="submit"
                  className="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 rounded transition-all"
                >
                  SUBMIT
                </button>
              </form>
            )}
          </div>
          {/* Rules - always visible, allow scroll if needed */}
          <div className="bg-white rounded-xl shadow p-6 flex-1 overflow-auto">
            <ol className="list-decimal pl-6 space-y-2 text-sm text-red-600">
              {depositRules.map((rule, idx) => (
                <li key={idx}>{rule}</li>
              ))}
            </ol>
          </div>
        </div>
        {/* Right: Deposit History */}
        <div className="w-[420px] flex flex-col">
          <div className="bg-white rounded-xl shadow p-4 flex-1 overflow-auto">
            <div className="font-bold text-blue-900 mb-3">Deposit History</div>
            <div className="overflow-x-auto">
              <table className="min-w-full text-xs">
                <thead>
                  <tr className="bg-[#1a237e] text-white">
                    <th className="px-2 py-2 font-semibold">TRANSACTION NO</th>
                    <th className="px-2 py-2 font-semibold">AMOUNT</th>
                    <th className="px-2 py-2 font-semibold">STATUS</th>
                    <th className="px-2 py-2 font-semibold">DATE</th>
                    <th className="px-2 py-2 font-semibold">REASON</th>
                  </tr>
                </thead>
                <tbody>
                  {dummyHistory.map((row, idx) => (
                    <tr key={idx} className="border-b last:border-b-0">
                      <td className="px-2 py-2">{row.transactionNo}</td>
                      <td className="px-2 py-2">{row.amount.toFixed(2)}</td>
                      <td className="px-2 py-2">
                        <span className={`px-2 py-1 rounded text-xs font-bold ${row.status === "APPROVED" ? "bg-green-100 text-green-700 border border-green-400" : "bg-yellow-100 text-yellow-700 border border-yellow-400"}`}>
                          {row.status}
                        </span>
                      </td>
                      <td className="px-2 py-2">{row.date}</td>
                      <td className="px-2 py-2">{row.reason}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
